/*************1st function*************/
> (define (pair x y)
    (cond((null? x) '())
         ((null? y) '())
         (else (append (list (list (car x) (car y))) (pair (cdr x) (cdr y)) ))))
> (pair '(1 2 3) '(a b c))
((1 a) (2 b) (3 c))
> (pair '(1 2 3 4) '(a b))
((1 a) (2 b))
> (pair '(1 (2 3) 4) '((a b) (c d)))   
((1 (a b)) ((2 3) (c d)))

/*************2nd function*************/
> (define (double x y)
    (cond((null? x)'())
      ((equal? (car x) y) (append (list(car x) (car x)) (double (cdr x) y)))
         (else (append (list(car x) ) (double (cdr x) y))))) 
> (double '(a b c) 'a) 
(a a b c)
> (double '(a (a b c) c) 'a)
(a a (a b c) c)
> (double '() 'a) 
()
> (double '(a (a (a)) (a)) '(a)) 
(a (a (a)) (a) (a))

/*************3rd function*************/
>  (define (list-replace x y z)
    (cond((null? x) '())
         ((list? (car x)) (append (list(list-replace (car x) y z)) (list-replace (cdr x) y z )))
         ((equal? (car x ) y) (append (list z) (list-replace (cdr x) y z )))
         (else (append (list (car x)) (list-replace (cdr x) y z )) )))
> (list-replace '(a b c) 'a 3) 
(3 b c)
> (list-replace '(a (a b c) c) 'a 3)
(3 (3 b c) c)
> (list-replace '() 'a 3) 
()
> (list-replace '(a (a (a))) 'a '(3)) 
((3) ((3) ((3))))

/*************4st function*************/
> (define (repeat x y)
    (cond ((= y 0) '())
          (else (append (list x) (repeat x (- y 1))))))
> (repeat 3 3) 
(3 3 3)
> (repeat 'a 9) 
(a a a a a a a a a)
> (repeat '(a) 5) 
((a) (a) (a) (a) (a))

/*************5st function*************/
(define (count x y)
    (cond ((null? x) 0)
    ((equal? (car x) y)(+ 1 (count (cdr x) y)))
    (else (count(cdr x) y))))

(define (rle x)
    (cond ((null? x) '())
         (else (append (list (list (car x) (count x (car x)))) (rle (list-tail x (count x (car x))))))))

/*************6st function*************/
(define (rld x)
    (cond ((null? x) '())
    (else (append (repeat (car (car x)) (car (cdr (car x)))) (rld (cdr x))))))
> (rld '((1 3) (3 1) (2 3) (9 6))) 
(1 1 1 3 2 2 2 9 9 9 9 9 9)



(define (make-association key val)
   (list key val))

(define (val-of assoc)
   (car (cdr assoc)))

(define (key-of assoc)
   (car assoc))


(define (make-map) ())

(define (map-insert map key value)
  (cons (make-association key value) map))
